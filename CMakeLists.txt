cmake_minimum_required(VERSION 3.1)
project(blackthunnus CXX)

include(GNUInstallDirs)
set(CMAKE_VERBOSE_MAKEFILE TRUE)
option(PROFILE "Use gperftools" FALSE)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
set(CMAKE_CXX_EXTENSIONS FALSE)

if(CMAKE_BUILD_TYPE MATCHES Debug)
  add_compile_options(-g)
else()
  add_definitions(-DNDEBUG)
endif()
add_compile_options(-O3 -march=native -Wall -Wextra -Wpedantic)

find_package(wtl)
find_package(sfmt)

set(Boost_NO_BOOST_CMAKE TRUE)
find_package(Boost REQUIRED COMPONENTS program_options iostreams filesystem system)
message("Boost_INCLUDE_DIRS: ${Boost_INCLUDE_DIRS}")

message("CMAKE_INSTALL_PREFIX: ${CMAKE_INSTALL_PREFIX}")
if(${CMAKE_INSTALL_PREFIX} MATCHES linuxbrew)
  set(CMAKE_INSTALL_LIBDIR lib)
endif()

set(CMAKE_INSTALL_NAME_DIR ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

file(READ "${CMAKE_SOURCE_DIR}/util/parameters.json" PARAMETERS_JSON)
configure_file(
  ${CMAKE_SOURCE_DIR}/src/config.hpp.in
  ${CMAKE_SOURCE_DIR}/src/config.hpp @ONLY
)

aux_source_directory(src srcfiles)
message("Source files: ${srcfiles}")

add_library(sharedlib SHARED ${srcfiles})
target_include_directories(sharedlib BEFORE
  PUBLIC ${Boost_INCLUDE_DIRS}
  INTERFACE $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/src>
)
target_link_libraries(sharedlib wtl sfmt ${Boost_LIBRARIES})
set_target_properties(sharedlib PROPERTIES
  OUTPUT_NAME ${PROJECT_NAME}
)

add_executable(executable main.cpp)
target_link_libraries(executable sharedlib)
if(PROFILE)
  target_link_libraries(executable profiler)
endif()
set_target_properties(executable PROPERTIES
  OUTPUT_NAME ${PROJECT_NAME}
)

install(TARGETS executable sharedlib
  EXPORT ${PROJECT_NAME}-config
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)
install(DIRECTORY src/
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}
  FILES_MATCHING PATTERN "*.hpp")
install(EXPORT ${PROJECT_NAME}-config
  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}
)

include(CTest)
if(BUILD_TESTING)
  add_subdirectory(test)
endif()
